---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This was design to setup bastion instance in public network in order to future admin & login.


Parameters:
  keyPairName:
    Description:  Key pair name for ec2.
    Type: String
  ami:
    Description:  Amazon image ID.
    Type: String
  baseVpc:
    Description: VPC to launch virtual server in.
    Type: AWS::EC2::VPC::Id
    # Default:  !GetAtt networkStack.Outputs.baseVpcOutput
  s3cf:
    Description:  S3 bucket name for storage cloudformation templates.
    Type: String
  publicSubnet1a:
    Description:  subnet to launch virtual server in.
    Type: AWS::EC2::Subnet::Id
  publicSubnet1b:
    Description:  subnet to launch virtual server in.
    Type: AWS::EC2::Subnet::Id
  publicSubnet1c:
    Description:  subnet to launch virtual server in.
    Type: AWS::EC2::Subnet::Id
  instanceType:
    Description:  instance tyep for ec2.
    Type: String
    Default: t2.small


Resources:

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to shost
      VpcId: !Ref baseVpc
      SecurityGroupIngress:
      -
        IpProtocol: TCP
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      -
        IpProtocol: TCP
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      -
        IpProtocol: TCP
        FromPort: '8080'
        ToPort: '9080'
        CidrIp: 0.0.0.0/0

  BostionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: !Sub '${AWS::StackName}-bostion-policy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "ec2:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "cloudwatch:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "xray:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "ec2messages:AcknowledgeMessage"
                  - "ec2messages:DeleteMessage"
                  - "ec2messages:FailMessage"
                  - "ec2messages:GetEndpoint"
                  - "ec2messages:GetMessages"
                  - "ec2messages:SendReply"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "ssm:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "ds:CreateComputer"
                  - "ds:DescribeDirectories"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "ds:CreateComputer"
                  - "ds:DescribeDirectories"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                Resource: "*"

      RoleName: !Sub '${AWS::StackName}-bostion-role'

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        -
          !Ref BostionRole

  BastionEc2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /home/ec2-user/amazon-cloudwatch-agent.json:
              source: !Sub
                - https://s3.amazonaws.com/${s3Name}/cloudwatch/amazon-cloudwatch-agent.json
                - { s3Name: !Ref s3cf }
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
              authentication: "S3AccessCreds"
            /home/ec2-user/first-run.sh:
              content:
                !Sub |
                #!/bin/bash
                sudo yum update -y
                cd /home/ec2-user/cloudwatch
                sudo ./install.sh
                cd /home/ec2-user
                sudo cp /home/ec2-user/amazon-cloudwatch-agent.json /opt/aws/amazon-cloudwatch-agent/etc/.
                cd /opt/aws/amazon-cloudwatch-agent/etc
                sudo sed -i -e "s/{aws_stack_name}/${AWS::StackName}/g" amazon-cloudwatch-agent.json
                instance_id=$(curl -s http://169.254.169.254/1.0/meta-data/instance-id/)
                sudo sed -i -e "s/{instance_id}/$instance_id/g" amazon-cloudwatch-agent.json
                sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
          sources:
              /home/ec2-user/cloudwatch: https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            # getConfig:
            #   command:  !Join
            #     - ''
            #     - - 'aws s3 cp s3://'
            #       -
            #         !Ref s3cf
            #       - '/cloudwatch/amazon-cloudwatch-agent.json amazon-cloudwatch-agent.json'
            #   cwd: "/home/ec2-user"
            #   ignoreErrors: false
            agent1:
              command:  "./first-run.sh"
              cwd: "/home/ec2-user"
              ignoreErrors: false
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref BostionRole

    Properties:
      #AdditionalInfo: String     # optional
      ImageId:  !Ref ami
      InstanceType: !Ref instanceType
      IamInstanceProfile: !Ref Ec2InstanceProfile
      KeyName: !Ref keyPairName
      Monitoring: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            -
              !Ref Ec2SecurityGroup
          SubnetId: !Ref  publicSubnet1a
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BastionEc2Instance --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2Instance --region ${AWS::Region}

      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-bastion-ec2'
        - Key: Owner
          Value: CC
        - Key: Purpose
          Value: Bastion
    CreationPolicy:
      ResourceSignal:
        Count:  1
        Timeout: PT5M
